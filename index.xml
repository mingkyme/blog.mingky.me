<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>MINGKYME 블로그</title><link>https://blog.mingky.me/</link><description>Recent content on MINGKYME 블로그</description><generator>Hugo -- gohugo.io</generator><language>ko</language><lastBuildDate>Fri, 14 Jul 2023 22:13:25 +0900</lastBuildDate><atom:link href="https://blog.mingky.me/index.xml" rel="self" type="application/rss+xml"/><item><title>nginx header 등록</title><link>https://blog.mingky.me/post/diaries/2023-07-14/</link><pubDate>Fri, 14 Jul 2023 22:13:25 +0900</pubDate><guid>https://blog.mingky.me/post/diaries/2023-07-14/</guid><description>nginx에서 header를 추가하는 방법 nginx에는 2방향의 header 추가 방법이 있다.
Nginx -&amp;gt; Origin (2) Nginx -&amp;gt; Client (4) Client 1-&amp;gt; Nginx 2-&amp;gt; Origin Client &amp;lt;-4 Nginx &amp;lt;-3 Origin 1,2,3,4 순서 중에서 2번과 4번 요청을 보내는 순간에는 header를 추가할 수 있다.
2번 추가 방법
proxy_set_header To-Origin Hello; 4번 추가 방법
add_header To-Client World [always]; add_header의 경우엔 always 라는 키워드를 이용해서 항상 header를 추가할 수 있다.
해당 always 키워드가 있는 이유는
Origin의 응답 Status가 200, 201, 204, 206, 301, 302, 303, 304, 307, 308 인 경우에만 동작한다.</description></item><item><title>Edge 컴퓨팅의 장점</title><link>https://blog.mingky.me/post/diaries/2023-07-13/</link><pubDate>Thu, 13 Jul 2023 22:14:22 +0900</pubDate><guid>https://blog.mingky.me/post/diaries/2023-07-13/</guid><description>CDN 서비스들은 Edge, Relay, Origin 이라는 개념을 가지고 있다.
Edge 서버는 Client의 접속을 받는 1차 서버이다.
Edge 서버는 수가 많다. 여러 트래픽을 분산하여 처리하기 위해서이다.
region 이란 개념으로 묶여 있다.
그렇다면 Relay는 무엇일까?
Relay는 Origin과 통신하는 서버들이다.
Origin 서버는 CDN 내부에 있을수도, 외부에 있을 수도 있다.
서버 수는 Edge &amp;gt; Relay &amp;gt; Origin 순으로 많다.
Relay가 많다면 Origin에 요청이 많아진다.
사용자 경험을 위해서 Edge 컴퓨팅을 이용할 수 있다.
사용하면 좋은 예시</description></item><item><title>초복 중복 말복</title><link>https://blog.mingky.me/post/diaries/2023-07-12/</link><pubDate>Wed, 12 Jul 2023 22:57:52 +0900</pubDate><guid>https://blog.mingky.me/post/diaries/2023-07-12/</guid><description>어제는 초복이었다.
삼계탕을 먹으며 초복의 뜻을 물어보는 질문에 당연하게 생각했던 부분이라 정의에 대해서 잘 알지 못한다는걸 깨달았다.
같이 식사한 인원들의 의견은 이랬다.
24절기 중 하나 아닌가? 삼계탕 먹기 위한 날 가장 더운 날 실제로 검색을 해보니 24절기는 아니고 가장 더운 날이라고 한다.
내가 안다는 것에 대한 정의가 흔들리는 순간이었다.
내가 설명할 수 없는 건 모르는 것과 다르지 않다고 알게 됐다.</description></item><item><title>스프링 핵심 원리 - 기본편 중간 후기</title><link>https://blog.mingky.me/post/diaries/2023-07-10/</link><pubDate>Mon, 10 Jul 2023 22:41:51 +0900</pubDate><guid>https://blog.mingky.me/post/diaries/2023-07-10/</guid><description>객체지향 강의를 봤다. 스프링 핵심 원리 - 기본편
java + spring 강의였는데 spring 내용이 나오기 전에 객체 지향 강의를 먼저 해주셨다.
객체지향을 잘 구현한 형태는 각각의 클래스가 다른 클래스에 대해서 알지 못해야 한다는 것이었다.
즉, interface를 이용하여, 서로가 communicate를 해야한다는 것이었다.
비유가 아주 인상적이었다.
연극을 위해 남배우와 여배우가 있는데
남배우가 여배우를 특정해서만 공연을 한다는 것이 말이 안된다는 것이었다.
남배우는 여배우가 누군지를 알 필요가 없다. 어떤 여배우가 오더라도 공연은 진행되야 한다.</description></item><item><title>CDN nginx의 Cache 상태</title><link>https://blog.mingky.me/post/diaries/2023-07-07/</link><pubDate>Fri, 07 Jul 2023 18:56:36 +0900</pubDate><guid>https://blog.mingky.me/post/diaries/2023-07-07/</guid><description>기본적인 cache 상태 이해한 항목들.
HIT: 서버에 캐시되어 있음. MISS: 서버에 캐시가 되어 있지 않음. BYPASS: 캐시가 되어있는 여부와 관계 없이, Origin으로 넘김. EXPIRED: 내가 가진 캐시가 TTL이 지났고, 원본과 다름. (만료됨.) REVALIDATED: 내가 가진 캐시가 TTL이 지났고, 원본과 같음을 확인함. (재 갱신.) 아직 이해하지 못한 항목
STALE: 내가 가진 캐시가 TTL이 지났음, 하지만 Origin이 응답하지 않아 오래된 캐시로 응답함. UPDATING: 내가 가진 캐시가 TTL이 지났음. 최신 데이터로 갱신 중인 상황임.</description></item><item><title>쓰레드(Threads)</title><link>https://blog.mingky.me/post/diaries/2023-07-06/</link><pubDate>Thu, 06 Jul 2023 23:14:15 +0900</pubDate><guid>https://blog.mingky.me/post/diaries/2023-07-06/</guid><description>Done List None To Do List None Memo 인스타에서 트위터와 비슷한 역할을 하는 SNS을 내놓았다.
트위터의 무기는 자유로움. 익명성 이라면 인스타그램은 반대를 추구한다.
실제 친구들도 쉽게 볼 수 있는 실명제. 깐깐한 제한.
현재 사람들의 의견은 반반이다. 트위터보다 좋다. 아니다.
나는 트위터보다 성장 가능성이 있다 라고 생각된다.
일단 익명성에서 오는 단점 상쇄. (클린)
진입장면이 낮음. (신규 SNS)
기능적으로는 모자란게 느껴지지만, 업데이트로 해결될 문제고 SNS의 메타를 확고하게 잡은 듯하다.
나도 오늘 하루는 쓰레드에 시간을 다 소비했다.</description></item><item><title>역정규화</title><link>https://blog.mingky.me/post/diaries/2023-07-05/</link><pubDate>Wed, 05 Jul 2023 23:35:07 +0900</pubDate><guid>https://blog.mingky.me/post/diaries/2023-07-05/</guid><description>Done List None To Do List None Memo 오늘 DB 설계를 하면서 고민했던 영역이 있다.
Company User Card 이렇게 3가지 경우가 있다.
해당 table은 1:N:M 관계를 가진다.
예를 들어, 하나카드를 이용하는 나는 모두의 쇼핑 카드를 들고 있다.
&amp;ldquo;하나카드&amp;rdquo; &amp;ldquo;나(MINGKYME)&amp;rdquo; &amp;ldquo;모두의 쇼핑&amp;rdquo;
해당 3가지 경우에 Card라는 테이블에 하나카드라는 걸 넣어야 할까? (단, 1개의 카드사만 사용한다는 전제)
이러한 경우에 DB 입장에서는 Card 테이블에서는 Company에 대한 정보가 있을 필요가 없다. (참조해서 확인 가능.)</description></item><item><title>TTFB(Time to First Byte)</title><link>https://blog.mingky.me/post/diaries/2023-07-04/</link><pubDate>Tue, 04 Jul 2023 21:21:52 +0900</pubDate><guid>https://blog.mingky.me/post/diaries/2023-07-04/</guid><description>Done List None To Do List None Memo TTFB란 요청후 응답을 받기 시작하는 전까지의 대기 시간을 의미한다.
SEO에 이 부분이 중요하게 작용한다고 한다.
대부분의 클라이언트 프로그램에서 측정을 하는 것으로 알고 있는데
AWS CloudFront 에서 해당 로그를 찾아 볼 수 있다.
웹 서버에서 cache가 HIT 됐을 때, TTFB 가 의미가 없어질 것으로 추측되는데 일단 값이 있으니 분석을 해봐야겠다.
++++++++++
2023.07.05 제보로 오타가 있음을 확인했다.
CloudFlare -&amp;gt; CloudFront</description></item><item><title>status에 대한 이해</title><link>https://blog.mingky.me/post/diaries/2023-06-29/</link><pubDate>Thu, 29 Jun 2023 22:07:20 +0900</pubDate><guid>https://blog.mingky.me/post/diaries/2023-06-29/</guid><description>Done List Home Bridge 구현완료 Status Code 304 Status Code 413 To Do List None Memo Home Bridge 기존에 Home Assistant 이용해서 사용을 했지만 만족스럽지 못해 직접 구현해서 사용하고 있었다.
하지만 Home Bridge 라는 녀석은 단순히 애플 홈킷에 등록하기 위한 브릿지로 내가 필요한 기능만 존재하여 이번에 설치하였다.
플러그인들이 많이 존재해서 Switch bot 사의 기기들을 다 연동을 시켰다.
Status Code 304 (Not Modified) 업무 중 내가 유지보수하고 있는 프로그램에서 etag와 last-modified 헤더가 존재하지 않아 불편하다는 문의가 나왔다.</description></item><item><title>HTTP 통신할 때, Status는 언제 결정 될까?</title><link>https://blog.mingky.me/post/diaries/2023-06-28/</link><pubDate>Wed, 28 Jun 2023 23:14:34 +0900</pubDate><guid>https://blog.mingky.me/post/diaries/2023-06-28/</guid><description>Done List None To Do List None Memo 오늘 회사 업무 중에 timeout이 제대로 동작하지 않는다는 리포팅을 듣고 확인을 하게 됐다.
timeout을 만들기 위해 임의로 용량이 큰 파일을 만들었다.
그리곤 테스트를 해보니 timeout이 나오지 않았다. 저번 패치에 문제가 있는건가 확인을 해보았다.
확인 결과 timeout을 지정한 이유는 origin 서버에서 응답을 주지 않으면 무한정 wait 하는 현상을 방지하기 위해서 만들었던 조건이기 때문에
origin 서버의 응답이 늦게 와야한다.
하지만 이번의 경우엔 TCP 세션은 맺어졌고, body를 계속해서 보내는 중이기에 timeout으로 지정되지 않았다.</description></item><item><title>github copilot 사용 후기</title><link>https://blog.mingky.me/post/diaries/2023-06-24/</link><pubDate>Sat, 24 Jun 2023 17:01:43 +0900</pubDate><guid>https://blog.mingky.me/post/diaries/2023-06-24/</guid><description>Done List None To Do List None Memo 회사계정으로 github copilot을 사용해봤다.
회사용 플랜이 개인 플랜보다 비싸다. 하지만 사용된 코드를 학습시키지 않는다 라는 차이가 있다.
주석으로 하나의 기능에 대해서 설명하면, 코드를 짜준다.
맥 기준으로 control + enter를 하면 10가지 답변 리스트를 알려준다.
하지만 이 기능은 만족스럽지 않다. (길이 제한과 완성도 부분)
만족했던 기능은 내 코드 스타일을 인지하고, 반복되는 작업을 줄여주는데 크게 역할을 한다.
예를 들어, 모든 function을 만들 때, RequestQuery, ResponseBody 라는 struct를 만드는 룰을 정해서 프로젝트를 만들고 있다.</description></item><item><title>Google 검색을 위한 도전</title><link>https://blog.mingky.me/post/diaries/2023-06-23/</link><pubDate>Fri, 23 Jun 2023 22:13:03 +0900</pubDate><guid>https://blog.mingky.me/post/diaries/2023-06-23/</guid><description>Done List None To Do List None Memo 본인이 사용하고 있는 blog.mingky.me 라는 도메인이 며칠 째 구글 검색에 노출되지 않는다.
의심되는 바로는 다른 도메인은 잘 검색 되지만, 해당 블로그에는 성인인증이 필요하다는 문구가 뜨는게 문제이지 않나 싶다.
이를 확인하기 위해 새로운 도메인을 구매하여, 한번 github에 배포 시 2개의 도메인에 모두 배포되게 설정을 했다.
이 설정을 위해, sed 라는 커맨드를 사용해봤다.
sed 커맨드는 파일을 열지 않고 안에 내용을 수정할 수 있는 커맨드 이다.</description></item><item><title>API 규격에 대한 고민</title><link>https://blog.mingky.me/post/diaries/2023-06-22/</link><pubDate>Thu, 22 Jun 2023 22:48:45 +0900</pubDate><guid>https://blog.mingky.me/post/diaries/2023-06-22/</guid><description>Done List None To Do List None Memo 오늘 고민 했던 사항에 대해서 메모를 남긴다.
RESTful API 규격을 맞추면 이렇게 설계가 된다.
URL 규격
GET /api/users -&amp;gt; 복수 조회 GET /api/users/1 -&amp;gt; 단일 조회 DELETE /api/users/1 -&amp;gt; 삭제 이런식으로 구성이 된다면, user가 사용하기 어렵다.
GET /api/users?userId=4 GET /api/users?userName=mingky 이런식으로 만들면 human 레벨에서는 보기도, 이해하기도 쉽다.
하지만 API 입장에서는 하나의 endpoint지만, 규격이 달라진다. (단일, 복수)
뭐가 맞는지 아직 찾진 못했다.
Admin API 분리에 대한 영역.</description></item><item><title>github action 에러</title><link>https://blog.mingky.me/post/diaries/2023-06-21/</link><pubDate>Wed, 21 Jun 2023 12:33:30 +0900</pubDate><guid>https://blog.mingky.me/post/diaries/2023-06-21/</guid><description>Done List github action에서 배포 실패 에러 수정 hugo latest로 설정하여 버전 up에 따른 이슈 hugo 버전을 지정하여 사용. (0.113.0) To Do List None Memo None</description></item><item><title>nginx update</title><link>https://blog.mingky.me/post/nginx/2023-06-21/</link><pubDate>Wed, 21 Jun 2023 05:07:29 +0900</pubDate><guid>https://blog.mingky.me/post/nginx/2023-06-21/</guid><description>현재버전은 nginx version: nginx/1.18.0 (Ubuntu) 이다.
ssl_reject_handshake on; SSL이 host와 맞지 않으면 연결을 거부하는 설정이다.
해당 설정은 1.20 부터 지원하는 기능이라 내가 사용하는 버전에서는 지원되지 않아 업데이트를 결정했다.
sudo echo &amp;#34;deb http://nginx.org/packages/ubuntu `lsb_release -cs` nginx&amp;#34; | sudo tee /etc/apt/sources.list.d/nginx.list curl -fsSL https://nginx.org/keys/nginx_signing.key | sudo apt-key add - sudo apt update sudo apt install nginx 새 버전은 nginx version: nginx/1.24.0</description></item><item><title>nginx 업데이트</title><link>https://blog.mingky.me/post/diaries/2023-06-20/</link><pubDate>Wed, 21 Jun 2023 05:06:03 +0900</pubDate><guid>https://blog.mingky.me/post/diaries/2023-06-20/</guid><description>Done List nginx update (nginx version: nginx/1.18.0 (Ubuntu) -&amp;gt; nginx version: nginx/1.24.0) To Do List None Memo nginx module 이슈로 인해, 컴파일해서 다시 설치해야겠다.</description></item><item><title>간단한 apple script</title><link>https://blog.mingky.me/post/applescript/2023-06-19/</link><pubDate>Mon, 19 Jun 2023 22:08:16 +0900</pubDate><guid>https://blog.mingky.me/post/applescript/2023-06-19/</guid><description>변수 선언
set num to 1 set str to &amp;#34;string&amp;#34; set num to num + 1 # 2 display dialog &amp;#34;number is &amp;#34; &amp;amp; num if 문
if true then display dialog &amp;#34;if&amp;#34; end if for 문
repeat 5 times display dialog &amp;#34;Hi&amp;#34; end repeat set charList to {&amp;#34;a&amp;#34;, &amp;#34;b&amp;#34;, &amp;#34;c&amp;#34;} repeat with i from 1 to count of charList set char to item i of charList display dialog char end repeat</description></item><item><title>이력서 작성 완료</title><link>https://blog.mingky.me/post/diaries/2023-06-19/</link><pubDate>Mon, 19 Jun 2023 22:00:13 +0900</pubDate><guid>https://blog.mingky.me/post/diaries/2023-06-19/</guid><description>Done List 이력서 쓰기 완료 나의 예전 velog 글인 Clova로 Switchbot 연동하기를 희망하는 분 연동해주기 (First User) To Do List None Memo Apple Script 관련 글 적는 것도 재밌을듯. Clova Extension 서버는 Go로 이뤄져 있다. (User Agent가 Go-http-client/1.1)</description></item><item><title>github action을 이용한 Hugo 블로그 만들기</title><link>https://blog.mingky.me/post/hugo/2023-06-16/</link><pubDate>Fri, 16 Jun 2023 22:16:21 +0900</pubDate><guid>https://blog.mingky.me/post/hugo/2023-06-16/</guid><description>github 구조 branch 목록
main (Hugo 코드) gh-pages (HTML 코드) HUGO 프로젝트 설정 # MAC 기준 brew install hugo hugo new site blog.mingky.me cd blog.mingky.me/theme git clone THEME_GIT_PATH # 공식홈페이지는 submodule을 추천 cd .. vi config.json # 본인은 json이 익숙 Branch 설정 git checkout --orphan gh-pages # 고아 브랜치를 생성함 Github Action 설정 github - setting - Secrets and variables - actions - Repository secrets - ACTIONS_DEPLOY_KEY 등록
name: github pages on: push: branches: - main jobs: deploy: runs-on: ubuntu-20.</description></item><item><title>sitemap 등록</title><link>https://blog.mingky.me/post/diaries/2023-06-15/</link><pubDate>Thu, 15 Jun 2023 23:05:33 +0900</pubDate><guid>https://blog.mingky.me/post/diaries/2023-06-15/</guid><description>Done List blog.mingky.me/sitemap.xml 등록 To Do List mgk.kr Nuxt JS로 만든거 일부 완성 후 배포하기 blog.mingky.me 구글 검색될 수 있게 설정하기 Memo None</description></item><item><title>구글 검색을 노려보자</title><link>https://blog.mingky.me/post/diaries/2023-06-14/</link><pubDate>Wed, 14 Jun 2023 23:34:00 +0900</pubDate><guid>https://blog.mingky.me/post/diaries/2023-06-14/</guid><description>Done List blog.mingky.me 에 채널톡 연동하기 To Do List mgk.kr Nuxt JS로 만든거 일부 완성 후 배포하기 blog.mingky.me 구글 검색될 수 있게 설정하기 Memo Hugo로 만든 블로그 및 CI/CD 설명 글 적으면 좋을듯</description></item><item><title>VSCode Command line 설치 (code 명령어)</title><link>https://blog.mingky.me/post/go/2021-12-24/</link><pubDate>Tue, 13 Jun 2023 23:45:52 +0900</pubDate><guid>https://blog.mingky.me/post/go/2021-12-24/</guid><description>terminal 에서 code 명령어를 이용하는 방법 VSCode를 설치 후, 실행한다. Command + Shift + P (Command Palette) code 입력 후, Sheel Command: Install &amp;lsquo;code&amp;rsquo; command in PATH 선택하여 설치. 이제 터미널에서 다음과 같이 사용 가능하다.
새 폴더 생성 후 Code로 열기 방법 2가지
mkdir test-folder code test-folder/ mkdir test-folder2 cd test-folder2 code . 매개변수를 이용해서 다양한 기능을 사용하기 -r (reuse) 현재 창을 재 사용하여 폴더를 엽니다.
code -r test-folder 반대 옵션은 -n (new) 입니다.</description></item><item><title>Golang remote debugging 하기</title><link>https://blog.mingky.me/post/go/2021-12-23/</link><pubDate>Tue, 13 Jun 2023 23:45:25 +0900</pubDate><guid>https://blog.mingky.me/post/go/2021-12-23/</guid><description>실행 환경 VSCode with &amp;ldquo;Remote - SSH&amp;rdquo; 이용해 접속
ssh 접속 후 Marketplace에서 Go 설치 (Install in SSH) Command + Shift + P (Command Palette) 이후 Debug 실행을 누르면 (F5) 정상적으로 동작한다.</description></item><item><title>Go로 Typora Image Uploader 만들기</title><link>https://blog.mingky.me/post/go/2021-12-12/</link><pubDate>Tue, 13 Jun 2023 23:44:53 +0900</pubDate><guid>https://blog.mingky.me/post/go/2021-12-12/</guid><description>Typora markdown 에디터 프로그램이다. 회사에서 추천을 받아서 사용해봤는데 notion이랑 견줄만한 좋은 프로그램이다. 최근 정식버전 출시로 유료로 변경됐다.
notion이랑 비교 시, 가장 큰 단점이 image를 복사 붙여넣기 할 수 없는 것이다.
notion
복사 =&amp;gt; 붙여넣기 시: notion 사 서버에 자동으로 업로드 된다. typora
복사 =&amp;gt; 붙여넣기 시: 동작 안함(설정 시, 로컬 경로로 첨부) Image uploader 이런 방식에서 typora 설정을 살펴보던 중, notion과 비슷하게 사용할 수 있는 옵션이 존재했다. Image upload setting 이다.</description></item><item><title>Golang M1 Mac VSCode Debug</title><link>https://blog.mingky.me/post/go/2021-11-20/</link><pubDate>Tue, 13 Jun 2023 23:43:31 +0900</pubDate><guid>https://blog.mingky.me/post/go/2021-11-20/</guid><description>M1 Mac Air, Monterey OS 기준으로 테스트 했습니다
Go 설치 https://golang.org/dl/ VS Code 설치 기존의 설치 방법은 Universal version 다운로드해서 진행했었지만, 이게 나에게 큰 난관을 불러왔다.
꼭 Apple Silicon version으로 다운해야한다.
https://code.visualstudio.com/ 접속 Other platforms 클릭 Apple Silicon 다운로드
응용 프로그램 폴더에 넣기
Debugger 다운 Command Shift P go install/Update Tools dlv, dlv-dap 설치
.vscode/launch.json
{ // IntelliSense를 사용하여 가능한 특성에 대해 알아보세요. // 기존 특성에 대한 설명을 보려면 가리킵니다.</description></item><item><title>Go Back-End 만들기</title><link>https://blog.mingky.me/post/go/2021-11-19-5/</link><pubDate>Tue, 13 Jun 2023 23:42:44 +0900</pubDate><guid>https://blog.mingky.me/post/go/2021-11-19-5/</guid><description>사용 스택 https://github.com/gofiber/fiber fiber =&amp;gt; nodeJS의 express 같은 web framework
소개에서도 express에서 영감을 받아서 제작 됐다고 한다
https://github.com/eknkc/amber amber =&amp;gt; nodeJS의 ejs 같은 template engine
fiber 와 연동을 위해 https://github.com/gofiber/template 내부의 amber 사용
사용하기 go get github.com/gofiber/fiber/v2 go get github.com/gofiber/template/amber 라이브러리를 다운로드 한다.
main.go package main import ( &amp;#34;github.com/gofiber/fiber/v2&amp;#34; &amp;#34;github.com/gofiber/template/amber&amp;#34; ) func main() { engine := amber.New(&amp;#34;views&amp;#34;, &amp;#34;.amber&amp;#34;) app := fiber.New(fiber.Config{Views: engine}) app.Get(&amp;#34;/&amp;#34;, func(c *fiber.Ctx) error { return c.Render(&amp;#34;index&amp;#34;, fiber.Map{}) }) app.</description></item><item><title>Go 함수</title><link>https://blog.mingky.me/post/go/2021-11-19-4/</link><pubDate>Tue, 13 Jun 2023 23:41:57 +0900</pubDate><guid>https://blog.mingky.me/post/go/2021-11-19-4/</guid><description>함수의 기본형 package main import &amp;#34;fmt&amp;#34; func main() { a := Add(1, 2) fmt.Println(a) // 3 b, d := AddSub(1, 2) fmt.Println(b, d)// 3 -1 } func Add(n1 int, n2 int) int { return n1 + n2 } // 여러개의 반환 값을 가질 수 있다. func AddSub(n1 int, n2 int) (int, int) { return n1 + n2, n1 - n2 } 일반 function 일반적인 사용방법이다.
package main import ( &amp;#34;fmt&amp;#34; ) func main() { CountDown(&amp;#34;A&amp;#34;) CountDown(&amp;#34;B&amp;#34;) } func CountDown(name string) { for i := 3; i &amp;gt; 0; i-- { fmt.</description></item><item><title>Go 배열의 연산</title><link>https://blog.mingky.me/post/go/2021-11-19-3/</link><pubDate>Tue, 13 Jun 2023 23:40:35 +0900</pubDate><guid>https://blog.mingky.me/post/go/2021-11-19-3/</guid><description>package main import ( &amp;#34;fmt&amp;#34; ) func main() { // 얉은 복사 var list1 []int var list2 []int list1 = []int{1, 2, 3} list2 = list1[:] list2[0] = 123 fmt.Println(list1) // [123 2 3] fmt.Println(list2) // [123 2 3] // 깊은 복사 var list3 [3]int var list4 [3]int list3 = [3]int{1, 2, 3} list4 = list3 list4[0] = 123 fmt.Println(list3) // [1 2 3] fmt.Println(list4) // [123 2 3] } 길이가 지정된 배열과 길이가 없는 배열은 다르게 동작한다.</description></item><item><title>Go 기본 문법 사용해보기</title><link>https://blog.mingky.me/post/go/2021-11-19-2/</link><pubDate>Tue, 13 Jun 2023 23:39:53 +0900</pubDate><guid>https://blog.mingky.me/post/go/2021-11-19-2/</guid><description>변수 사용 // 선언과 할당을 분리 var a int // 생성 시 0으로 초기화 됨 a = 10 // 선언과 할당을 동시 var b int = 23 // 변수형을 생략 c := 20 IF 문 a := 200 if a &amp;lt; 100 { fmt.Println(&amp;#34;True&amp;#34;) } else { fmt.Println(&amp;#34;False&amp;#34;) } // False Go 언어에서의 들여쓰기는 이 스타일로 Fix 됐다. 다른 스타일로 작성 시, error가 발생한다.
FOR 문 반복문에 대해 다른 키워드 없이 for문으로 사용한다.</description></item><item><title>Go 사용해보기</title><link>https://blog.mingky.me/post/go/2021-11-19/</link><pubDate>Tue, 13 Jun 2023 23:36:52 +0900</pubDate><guid>https://blog.mingky.me/post/go/2021-11-19/</guid><description>IT 산업기능요원으로 회사를 입사 후 Go를 배워보려고 합니다.
설치 Go를 설치하기 위해서 공식 사이트로 접속합니다. https://golang.org/
Download 후, 설치하면 완료입니다. 설치 확인 방법은 Terminal 에서
go version # go version go1.17.3 darwin/arm64 이런식으로 나옵니다. 본 예시는 M1 Mac Air 기준입니다.
프로젝트 만들기 mkdir golang-test code golang-test/ 본인은 VS Code를 선호하기에 이런 명령어로 프로젝트를 시작합니다.
라이브러리 등을 사용하기 위해 init를 해야합니다.
go mod init example.com 명령 완료 후, go.mod 파일이 생성됐습니다.</description></item><item><title>기본적인 셋팅</title><link>https://blog.mingky.me/post/diaries/2023-06-13/</link><pubDate>Tue, 13 Jun 2023 22:54:18 +0900</pubDate><guid>https://blog.mingky.me/post/diaries/2023-06-13/</guid><description>Done List blog.mingky.me 셋팅 www.mingky.me 셋팅 (Rollback) To Do List blog.mingky.me 에 채널톡 연동하기 mgk.kr Nuxt JS로 만든거 일부 완성 후 배포하기 Memo guess mbti 진행사항 확인 필요</description></item><item><title>첫 일기</title><link>https://blog.mingky.me/post/diaries/2023-06-12/</link><pubDate>Mon, 12 Jun 2023 23:22:36 +0900</pubDate><guid>https://blog.mingky.me/post/diaries/2023-06-12/</guid><description>Done List None To Do List mgk.kr 사이트 NuxtJS 로 만들어보기 blog 만들어보기 https://mingky.me/ 으로 연동할 예정. Memo None</description></item></channel></rss>